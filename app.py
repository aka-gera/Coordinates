# -*- coding: utf-8 -*-
""" 

Automatically generated by Colaboratory.
 
"""

# !pip install dash
# # !pip install dash==1.19.0
# !pip install jupyter_dash
# !pip install --upgrade plotly
# !pip install dash --upgrade
# !pip install dash_bootstrap_components

"""<!--  -->"""

# Import required libraries
import pandas as pd
import dash
from dash import dcc
from dash import html
from dash import Dash, dcc, html, dash_table, Input, Output, State, callback
from dash.dependencies import Input, Output 
from jupyter_dash import JupyterDash
import plotly.graph_objects as go
import plotly.express as px
from dash import no_update
import dash_bootstrap_components as dbc


import pyproj
  

shw = 0

dropdown_options_style = {'color': 'white', 'background-color' : 'gray'}

dropdown_options = [
    {'label': 'All Features', 'value': 'ALL', 'style': dropdown_options_style}
]

for col in range(100):
    dropdown_options.append({'label': 'Feature'+str(col), 'value': 'Feature'+str(col), 'style':  dropdown_options_style})

box_style={
            'width':'80%',
            'padding':'3px',
            'font-size': '20px',
            'text-align-last' : 'center' ,
            'margin': 'auto',  # Center-align the dropdown horizontally
            'background-color' : 'black',
            'color': 'black'
            }
# Create a dash application Cyborg

app =  dash.Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])
JupyterDash.infer_jupyter_proxy_config()

server = app.server
app.config.suppress_callback_exceptions = True

app.layout = html.Div(
    style={
        'color' : 'black',
        # 'backgroundColor': '',  # Set the background color of the app here
        'height': '100vh'  # Set the height of the app to fill the viewport
    },
    children=[
    html.Br(),
    html.Br(),
    html.Br(),
    html.H1('Coordinates Finder',
            style={'textAlign': 'center',
                   'color': 'white',
                   'background-color' : 'black',
                   'font-size': 40
                   }
            ),
    html.Br(),



    html.Br(),
    html.Br(),


 
    html.Br(),
    #       # Create an outer division
    #  html.Div([
    #         html.Div([
    #             html.Div([
    #               dcc.Dropdown(
    #                   id='site-dropdown1',
    #                   options=dropdown_options,
    #                   value='ALL',
    #                   placeholder='Select a feature',
    #                   style=box_style,
    #                   searchable=True
    #               ) ,
    #               html.Div(id='output-graph1') ,
    #             ]),
    #     ]),
    #     html.Div([
    #         dcc.Dropdown(
    #             id='site-dropdown2',
    #             options=[
    #                     {'label':  'Logistic Regression',          'value': 'LG',   'style':  dropdown_options_style},
    #                     {'label': 'Decision Tree Classifier',      'value': 'DT',   'style':  dropdown_options_style},
    #                     {'label': 'K-Nearest Neighbors',           'value': 'KNN',  'style':  dropdown_options_style},
    #                     {'label': 'Support Vector Classification', 'value': 'SVC',  'style':  dropdown_options_style},
    #                     {'label': 'Gaussian Naive Bayes',          'value': 'NB',   'style':  dropdown_options_style},
    #                     {'label': 'Stochastic Gradient Descent',   'value': 'SGD',  'style':  dropdown_options_style}
    #                     ],
    #             value='LG',
    #             placeholder='Select a Machine Learning Classifier',
    #             style=box_style,
    #             searchable=True,
    #         ) ,
    #     ]),
    #  ]),


    html.Div([
    html.H1("Enter the coordinates of your location",
            style={'textAlign': 'center',
                        'color': 'white',
                        'background-color' : 'black',
                        'font-size': 20
                        }
             ),

    html.Div([
        html.Label('X:'),   
        dcc.Input(
            id='input-x',
            type='number',
            value=0,  # Initial value
            debounce=True   
        ),
        html.Label('Y:'),   
        dcc.Input(
            id='input-y',
            type='number',
            value=0,  # Initial value
            debounce=True  # Delay the callback until typing stops
        ),
        html.Div(id='output')  # Placeholder for displaying output
    ]),
    html.Div(id='output-resultv')
],
             style={'textAlign': 'center',
                        'color': 'white',
                        'background-color' : 'black',
                        'font-size': 20
                        }
             ),

        html.Br(),
    html.Br(),
    html.Br(),
    html.Br(),
    html.Div([
        html.Div( ['Click the icon below to view the position on google map']
    ),
        html.Div(id='output-text')
    ],
        style={'textAlign': 'center', 'color': 'white', 'background-color' : 'black',   'font-size': 20},
        ),


 
    html.Br(),
    html.Br(),
    html.Div([
        html.A(
            html.Img(src='https://img.icons8.com/color/48/000000/github.png'),
            href='https://github.com/aka-gera',
            target='_blank'
        ),
        html.A(
            html.Img(src='https://img.icons8.com/color/48/000000/linkedin.png'),
            href='https://www.linkedin.com/in/aka-gera/',
            target='_blank'
        ),
        html.A(
            html.Img(src='https://img.icons8.com/color/48/000000/youtube.png'),
            href='https://www.youtube.com/@aka-Gera',
            target='_blank'
        ),
    ], style={'display': 'flex', 'justify-content': 'center'})


])








@app.callback([
        Output('output-text', 'children'),
        Output('output-resultv', 'children'),
    ],
    [
        # Input('site-dropdown1', 'value'),
        # Input('site-dropdown2', 'value'),
        Input('input-x', 'value'),
        Input('input-y', 'value'),
        ],
        prevent_initial_call=True
              )



def update_output(input_x,input_y):
    # Define the coordinate transformation
    wgs84 = pyproj.CRS("EPSG:4326")
    web_mercator = pyproj.CRS("EPSG:32631")
    transformer = pyproj.Transformer.from_crs(web_mercator, wgs84) 


    try:
        input_lat, input_long = transformer.transform(input_x, input_y)
        v1 = html.Div([
            html.Span('Longitude : ', style={'margin-right': '10px'}),
            html.Span(f'{input_long:.7f}'),
            html.Br(),
            html.Span('Latitude : ', style={'margin-right': '10px'}),
            html.Span(f'{input_lat:.7f}')
        ], style={
            'textAlign': 'center',
            'color': 'grey',
            'background-color': 'black',
            'font-size': 20
        })
    except Exception as e:
        v1 = f"Error: {str(e)}"

     
    txt_output =html.A(
            html.Img(src="https://img.icons8.com/color/48/000000/map.png"),
            # href=f'https://www.google.com/maps/dir//{input_lat},{input_long}/@{input_lat},{input_long},17z?entry=ttu',
            href=f'https://www.google.com/maps/search/{input_lat},{input_long}?sa=X&ved=2ahUKEwiN9cXmjsKBAxXWM1kFHYGUDQUQ8gF6BAgQEAA&ved=2ahUKEwiN9cXmjsKBAxXWM1kFHYGUDQUQ8gF6BAgREAI',
            target='_blank'
        ),
            # )

    return  [txt_output,v1 ]



# Run the app
if __name__ == '__main__':
    app.run_server(  debug=False)
